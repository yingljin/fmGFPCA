---
title: "Simulation"
author: "Ying Jin"
date: "`r Sys.Date()`"
output: 
  html_document:
    code_folding: hide
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(tidyverse)
library(here)
# source(here("Code/gmfpca.R"))
theme_minimal()
```

# Simulation set-up

This file documents the simulation scheme of multi-level functional data. 

- Sample size I = 100
- Number of visits J = 5
- Number of sampling points K = 100

```{r}
J <- 5
K <- 100
t_vec <- seq(0, 1, length.out = K)
L <- M <- 4
```

- Binary outcomes: 

$$Y_{ij}(t) \sim Bernoulli(g(\eta_{ij}(t)))$$

$$\eta_{ij}(t)=b_0(t)+\sum_{l=1}^4\xi_{il}\phi_l(t)+\sum_{m=1}^4\zeta_{ijm}\psi_m(t)$$


- Level 1: 

$$\phi_l(t) = \{\sqrt{2}sin(2\pi t), \sqrt2 cos(2\pi t), \sqrt2 sin (4\pi t), \sqrt2 cos(4\pi t)\}$$

$$\xi_{il} \sim N(0, \lambda_l), \hspace{0.5cm} \lambda_l = 0.5^{l-1}, l=1,2, 3, 4$$

```{r efuncs_l1}
# level 1 eigenfunctions:
phi_mat <- matrix(NA, nrow = K, ncol = L)
phi_mat[, 1] <- sqrt(2)*sin(2*pi*t_vec)
phi_mat[, 2] <- sqrt(2)*cos(2*pi*t_vec)
phi_mat[, 3] <- sqrt(2)*sin(4*pi*t_vec)
phi_mat[, 4] <- sqrt(2)*cos(4*pi*t_vec)

colnames(phi_mat) <- paste0("phi", 1:L)

phi_mat %>% data.frame() %>%
  mutate(t=t_vec) %>%
  pivot_longer(starts_with("phi")) %>%
  ggplot()+
  geom_line(aes(x=t, y=value, col=name))+
  labs(x="t", y="", col = "PC")

lambda <- 0.5^((1:L)-1)
```





- Level 2: 

$$\psi_l(t) = \{\sqrt{2}sin(6\pi t), \sqrt2 cos(6\pi t), \sqrt2 sin (8\pi t), \sqrt2 cos(8\pi t)\}$$

$$\zeta_{ijm} \sim N(0, \gamma_{m}), \hspace{0.5cm} \gamma_m = 0.5^{m-1}, l=1,2, 3, 4$$
```{r efuncs_l2}
# level 2 eigenfunctions:
psi_mat <- matrix(NA, nrow = K, ncol = M)
psi_mat[, 1] <- sqrt(2)*sin(6*pi*t_vec)
psi_mat[, 2] <- sqrt(2)*cos(6*pi*t_vec)
psi_mat[, 3] <- sqrt(2)*sin(8*pi*t_vec)
psi_mat[, 4] <- sqrt(2)*cos(8*pi*t_vec)

colnames(psi_mat) <- paste0("psi", 1:M)

psi_mat %>% data.frame() %>%
  mutate(t=t_vec) %>%
  pivot_longer(starts_with("psi")) %>%
  ggplot()+
  geom_line(aes(x=t, y=value, col=name))+
  labs(x="t", y="", col = "PC")

gamma <- 0.5^((1:M)-1)
```


# Example of one subject

```{r oneSubject}
# level 1 score (subject)
xi <- sapply(lambda, function(x){rnorm(1, mean=0, sd = sqrt(x))})
# level 1 random effects
# phi_mat%*%xi


# level 2 score (subject-visit level)
zeta <- sapply(gamma, function(x){rnorm(J, mean=0, sd = sqrt(x))})

# latent function
eta <- 0 + apply(psi_mat %*% t(zeta), 2, function(x){x+phi_mat %*% xi})
```


```{r, fig.height=3, fig.width=15}
eta %>% data.frame() %>% 
  mutate(t = t_vec) %>%
  pivot_longer(starts_with("X"), names_to = "visit") %>% 
  mutate(probs = plogis(value)) %>%
  mutate(Y = rbernoulli(1, probs)) %>%
  mutate(Y = as.numeric(Y)) %>%
  ggplot()+
  geom_line(aes(x=t, y=probs))+
  geom_point(aes(x=t, y=Y), size = 0.5)+
  facet_wrap(~visit, nrow = 1)

```

# A full datasets? 

```{r FullData}
NI<- 100 # sample size
df_full <- expand.grid(id=1:NI, visit = 1:J, t=t_vec) %>% arrange(id, visit, t)
df_full$eta <- NA

for(i in 1:NI){
  # level 1 score (subject)
  xi <- sapply(lambda, function(x){rnorm(1, mean=0, sd = sqrt(x))})
  # level 2 score (subject-visit level)
  zeta <- sapply(gamma, function(x){rnorm(J, mean=0, sd = sqrt(x))})
  # latent function
  eta_i <- 0 + apply(psi_mat %*% t(zeta), 2, function(x){x+phi_mat %*% xi})
  df_full[df_full$id==i, "eta"] <-  as.vector(eta_i)
  
}

df_full <- df_full %>% mutate(probs = plogis(eta)) %>%
  mutate(Y = rbernoulli(1, probs)) %>%
  mutate(Y = as.numeric(Y))

```

```{r, fig.height=12, fig.width=15}
df_full %>% data.frame() %>% 
  filter(id %in% 1:4) %>%
  ggplot()+
  geom_line(aes(x=t, y=probs))+
  geom_point(aes(x=t, y=Y), size = 0.5)+
  facet_grid(row = vars(id), col=vars(visit))

# save(df, file = here("Data/simData.RData"))
```

```{r, eval=F}
gmfpca(Y ~ (1|id)+(i|id:visit), data = df_full, family = binomial,  
       var.names = list(
         id_name = "id",
         visit_name = "visit",
         domain_name = "t")
       )
```